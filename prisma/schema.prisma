generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Todo {
    id          Int      @id @unique @default(autoincrement())
    title       String   @db.Text
    description String?  @db.LongText
    completed   Boolean  @default(false)
    updatedAt   DateTime @updatedAt
    createdAt   DateTime @default(now())

    // Relations
    userId String
    user   User   @relation(references: [id], fields: [userId])

    @@index([userId])
}

model Note {
    id          Int      @id @unique @default(autoincrement())
    title       String   @db.Text
    description String?  @db.LongText
    image       String   @db.Text
    updatedAt   DateTime @updatedAt
    createdAt   DateTime @default(now())

    // Relations
    userId String
    user   User   @relation(references: [id], fields: [userId])

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?   @db.Text
    email         String?   @unique
    emailVerified DateTime?
    image         String?   @db.Text
    todos         Todo[]
    notes         Note[]
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
